# NOTE: Swagger also works with JSON!

# TODO: params are mandatory for Swagger to have meaningful tests that require them (GET tests, in this case)

openapi: 3.0.0
info:
  title: REST API with MEN
  # Things won't be cool if I want to write a meaty, multiline description:
  # https://stackoverflow.com/a/21699210
  description: "This is a student API made for a course.
    Contains the basics - CRUD operations for minimal registered and guest users.\n
    Content domain: Tasks (for a project management app. Continued in another course.)"
  version: 1.0.0-tutorial
servers:
  - url: http://localhost:4000/api/
    description: Localhost development server

tags:
  - name: GET Routes
    description: Routes that return information from the database. Not protected.
  - name: CRUD Routes
    description: Routes that modify the database. Create a user and authenticate to use these.
  - name: User Routes
    description: Routes related to users. Register and log in to be able to modify the database!
    # And in reality, this ONLY pairs names with descriptions. We may use tags not "defined" here just fine.

components:
  securitySchemes:  # this is what appears as a popup once you click "Authorize" in Swagger
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: header       # can be "header", "query" or "cookie"
      name: auth-token

  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        state_visibility:
          type: string
        state_completion:
          type: string
        created_at:
          type: date
        time_estimated:
          type: number
        time_registered:
          type: number
    
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        date:
          type: string

paths:

  /user/register:
    post:
      summary: Register a new User
      description: Register a new User in the database
      tags:
        - User Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"

      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  _id:
                    type: string

  /user/login:
    post:
      summary: Login a User
      description: Login a User in order to get JWT token (auth-token)
      tags:
        - User Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses:
        200:
          description: User logged in succesfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  data:
                    type: string


  /tasks:
    get:
      tags:
        - GET Routes
      summary: Retrieves a list of Tasks
      description: Retrieves a list of tasks as JSON objects.
      responses:
        200:
          description: A list of task JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"  # the ref is to the "components" object defined within THIS file
        500:
        # 5XX:
          description: Unexpected server error.

  /tasks/id/{id}:
    get:
      tags:
        - GET Routes
      summary: Retrieves a Task by ID
      description: Retrieves a Task as a JSON object.
      responses:
        200:
          description: A Task JSON object.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Task"  # the ref is to the "components" object defined within THIS file
        500:
        # 5XX:
          description: Unexpected server error.

  /tasks/{name}:
    get:
      tags:
        - GET Routes
      summary: Retrieves a Task by Name
      description: Retrieves a Task as a JSON object.
      responses:
        200:
          description: A Task JSON object.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Task"  # the ref is to the "components" object defined within THIS file
        500:
        # 5XX:
          description: Unexpected server error.

  /tasks/visibility/{state_visibility}:
    get:
      tags:
        - GET Routes
        # de facto:
        # parameters:
        #   - in: <etc.> (see below)
      summary: Retrieves a list of Tasks by their Visibility
      description: Retrieves a list of tasks as JSON objects.
      responses:
        200:
          description: A list of task JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"  # the ref is to the "components" object defined within THIS file
        500:
        # 5XX:
          description: Unexpected server error.

  /tasks/completion/{state_completion}:
    get:
      tags:
        - GET Routes
        # de facto:
        # parameters:
        #   - in: <etc.> (see below)
      summary: Retrieves a list of Tasks by their Completion
      description: Retrieves a list of tasks as JSON objects.
      responses:
        200:
          description: A list of task JSON objects in an array.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"  # the ref is to the "components" object defined within THIS file
        500:
        # 5XX:
          description: Unexpected server error.
    
  /tasks/create:
    post:
      summary: Create a new Task
      description: Create a new Task
      security:
        - ApiKeyAuth: []      
      tags:
        - CRUD Routes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        201:
          description: Task created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        401:
          description: "Unauthorized user tried to create a Task without passing a token.
            (Pass a response JWT token with this request.)"
        400:
          description: "Unauthorized user tried to create a Task with an invalid token.
            (Try again - either wrongly copypasted from the response, or a bad malicious attempt.)"
  
  /tasks/edit/{id}:
    patch:
      summary: Updates the Name and Description of a specific Task
      description: Updates a specific Task based on its id
      security:
        - ApiKeyAuth: [] 
      tags:
        - CRUD Routes           
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"

      responses:
        201:
          description: Task updated succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/delete/{id}:
    delete:
      summary: Deletes a specific Task
      description: Deletes a specific Task based on its id
      security:
        - ApiKeyAuth: []   
      tags:
        - CRUD Routes         
      parameters:
        - in: path
          name: id
          required: true
          description: MongoDB id
          schema:
            type: string      

      responses:
        201:
          description: Task deleted succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"